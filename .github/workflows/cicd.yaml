name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  REPOSITORY: cryptox
  ECR_REGISTRY: <your-account-id>.dkr.ecr.<region>.amazonaws.com

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

    - name: Build Docker image
      run: docker build -t $REPOSITORY:${{ github.sha }} .

    - name: Tag Docker image
      run: docker tag $REPOSITORY:${{ github.sha }} ${{ env.ECR_REGISTRY }}/$REPOSITORY:${{ github.sha }}

    - name: Push Docker image to ECR
      run: docker push ${{ env.ECR_REGISTRY }}/$REPOSITORY:${{ github.sha }}

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run tests
      run: docker run --rm ${{ env.ECR_REGISTRY }}/$REPOSITORY:${{ github.sha }} ./run-tests.sh

  security_scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Security scan with Snyk
      uses: snyk/actions/docker@v2
      with:
        image: ${{ env.ECR_REGISTRY }}/$REPOSITORY:${{ github.sha }}
        args: --file=Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test, security_scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: v1.18.0

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.5.0

    - name: Set up Kubeconfig
      run: echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Deploy to Kubernetes using Helm
      run: |
        helm upgrade --install ${{ secrets.HELM_RELEASE_NAME }} ./helm-chart \
          --namespace ${{ secrets.K8S_NAMESPACE }} \
          --set image.repository=${{ env.ECR_REGISTRY }}/$REPOSITORY,image.tag=${{ github.sha }} \
          --kube-context ${{ env.KUBE_CONTEXT }}
